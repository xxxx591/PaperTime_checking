package com.tocheck.parent.web.interceptor;

import com.tocheck.parent.common.util.SSDBUtils;
import com.tocheck.parent.core.entity.WebUser;
import com.tocheck.parent.core.interfaces.Auth;
import com.tocheck.parent.core.utils.TocheckUtil;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Enumeration;

/**
 * @author pangliang
 * @create 2017-06-08 16:12
 **/
@Component
public class UserInterceptor extends HandlerInterceptorAdapter {

    @Autowired
    private TocheckUtil tocheckUtil;

    @Autowired
    private SSDBUtils ssdbUtils;

    private Logger logger = LoggerFactory.getLogger(UserInterceptor.class);

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        String sessionId = tocheckUtil.putPaperFreeSessionId(request, response);
        HandlerMethod _handler = (HandlerMethod) handler;
        Auth auth = _handler.getMethodAnnotation(Auth.class);
        WebUser user = null;
        if (StringUtils.isNotEmpty(sessionId)) {
            user = tocheckUtil.getWebUser(sessionId);
            if (auth != null && user == null) {
                if (request.getHeader("x-requested-with") != null && "XMLHttpRequest".equalsIgnoreCase(request.getHeader("x-requested-with"))) {
                    response.setHeader("sessionstatus", "timeout");//在响应头设置 session状态
                    response.setStatus(403);
                    logger.warn("ajax请求时，用户session过期");
                } else {
                    String requestUrl = request.getRequestURL().toString();
                    String param = "";
                    Enumeration<String> paramNames = request.getParameterNames();
                    while (paramNames.hasMoreElements()) {
                        String paramName = paramNames.nextElement();
                        String[] paramValues = request.getParameterValues(paramName);
                        if (paramValues.length == 1) {
                            String paramValue = paramValues[0];
                            if (paramValue.length() != 0) {
                                param += ("".equals(param) ? "?" : "&") + paramName + "=" + paramValue;
                            }
                        }
                    }
                    requestUrl = requestUrl + param;
                    ssdbUtils.save("referer-" + sessionId, requestUrl);
                    response.setStatus(403);
                    response.sendRedirect("/");
                    return false;
                }
                return false;
            }
        }
        request.setAttribute("webUser", user);
        return true;
    }
}
