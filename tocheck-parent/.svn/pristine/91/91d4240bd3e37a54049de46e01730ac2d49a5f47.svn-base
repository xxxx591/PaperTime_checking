package com.paperpass.parent.core.utils;

import com.paperpass.parent.common.common.Constants;
import com.paperpass.parent.common.util.DateUtil;
import com.paperpass.parent.common.util.HttpClientUtil;
import com.paperpass.parent.common.util.MD5Utils;
import com.paperpass.parent.common.util.QrCodeUtil;
import com.paperpass.parent.core.common.PayProperties;
import com.paperpass.parent.core.dao.online.IOnlineRechargeRecordDao;
import com.paperpass.parent.core.dto.ChargeForm;
import com.paperpass.parent.core.dto.WeiXinPayDto;
import com.paperpass.parent.core.entity.online.OnlineRechargeRecord;
import com.paperpass.parent.core.entity.tb.TaobaoPayRecord;
import com.paperpass.parent.core.entity.tb.TaobaoWxConfig;
import com.paperpass.parent.core.vo.common.RechargeRecordVo;
import com.paperpass.parent.core.vo.online.OnlineRechargeRecordVo;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.core.util.QuickWriter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;
import com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder;
import com.thoughtworks.xstream.io.xml.XppDriver;
import org.apache.commons.lang3.StringUtils;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import java.io.*;
import java.security.PublicKey;
import java.text.DecimalFormat;
import java.util.*;

/**
 * @author pangliang
 * @create 2017-04-19 13:48
 **/
@Component
public class WxPayUtil {


    private static final Logger logger = LoggerFactory.getLogger(WxPayUtil.class);

    @Autowired
    private PayProperties payProperties;

    @Autowired
    private RechargeUtil rechargeUtil;

    @Autowired
    private TaobaoPayRecordUtil taobaoPayRecordUtil;

    @Autowired
    private OnlineAliPayUtil onlineAliPayUtil;

    @Autowired
    private IOnlineRechargeRecordDao onlineRechargeRecordDao;

    public String createWeiXinOrder(ChargeForm chargeForm,Boolean isFastCheck) throws Exception {
        RechargeRecordVo recordVo = rechargeUtil.getByOrderNum(chargeForm.getOrderNum());
        if (null == recordVo) rechargeUtil.create(chargeForm);
        Map<String, String> map = new LinkedHashMap<>();
        List<String> list = new LinkedList<>();
        WeiXinPayDto weiXinPayDto = new WeiXinPayDto();
        list.add("appid");
        map.put("appid", payProperties.wxAppId);
        weiXinPayDto.setAppid(payProperties.wxAppId);
        list.add("mch_id");
        map.put("mch_id", payProperties.wxMchId);
        weiXinPayDto.setMch_id(payProperties.wxMchId);
        list.add("device_info");
        map.put("device_info", "WEB");
        weiXinPayDto.setDevice_info("WEB");
        list.add("nonce_str");
        String nonceStr = rechargeUtil.createNonceStr();
        map.put("nonce_str", nonceStr);
        weiXinPayDto.setNonce_str(nonceStr);
        list.add("body");
        map.put("body", chargeForm.getSubject());
        weiXinPayDto.setBody(chargeForm.getSubject());
        list.add("attach");
        map.put("attach", chargeForm.getUserId() + "");
        weiXinPayDto.setAttach(chargeForm.getUserId() + "");
        list.add("out_trade_no");
        map.put("out_trade_no", chargeForm.getOrderNum());
        weiXinPayDto.setOut_trade_no(chargeForm.getOrderNum());
        list.add("total_fee");
        DecimalFormat df = new DecimalFormat("#0");
        String totalAmount = df.format(chargeForm.getAmount().doubleValue()*100);
        map.put("total_fee", totalAmount);
        weiXinPayDto.setTotal_fee(totalAmount);
        list.add("spbill_create_ip");
        map.put("spbill_create_ip", chargeForm.getUserIp());
        weiXinPayDto.setSpbill_create_ip(chargeForm.getUserIp());
        list.add("time_start");
        String startTime = DateUtil.getDate(new Date(), "yyyyMMddHHmmss");
        map.put("time_start", startTime);
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.MINUTE, 10);
        weiXinPayDto.setTime_start(startTime);
        list.add("time_expire");
        String endTime = DateUtil.getDate(calendar.getTime(), "yyyyMMddHHmmss");
        map.put("time_expire", endTime);
        weiXinPayDto.setTime_expire(endTime);
        list.add("notify_url");
        map.put("notify_url", payProperties.wxNotifyUrl);
        weiXinPayDto.setNotify_url(payProperties.wxNotifyUrl);
        if(isFastCheck){
            map.put("notify_url", payProperties.wxFastCheckNotifyUrl);
            weiXinPayDto.setNotify_url(payProperties.wxFastCheckNotifyUrl);
        }
        list.add("trade_type");
        map.put("trade_type", payProperties.wxTradeType);
        weiXinPayDto.setTrade_type(payProperties.wxTradeType);
        list.add("product_id");
        map.put("product_id", payProperties.wxProductId);
        weiXinPayDto.setProduct_id(payProperties.wxProductId);
        list.add("limit_pay");
        map.put("limit_pay", payProperties.wxLimitPay);
        weiXinPayDto.setLimit_pay(payProperties.wxLimitPay);
        String sign = weiPaySign(map, list, payProperties.wxApiKey);
        map.put("sign", sign);
        weiXinPayDto.setSign(sign);
        xstream.alias("xml", WeiXinPayDto.class);
        String params = xstream.toXML(weiXinPayDto);
        params = StringUtils.replace(params, "__", "_");
        logger.info("支付请求参数params={}", params);
        String result = HttpClientUtil.doHttpPost(payProperties.wxGateway, params);
        logger.info("支付结果result={}", result);
        InputStream inputStream = new ByteArrayInputStream(result.getBytes("UTF-8"));
        Map<String, String> payMap = parseXml(inputStream);
        Date time = new Date();
        StringBuffer path = new StringBuffer("");
        path.append(DateUtil.getDate(time, "yyyy")).append("/");
        path.append(DateUtil.getDate(time, "MM")).append("/");
        path.append(DateUtil.getDate(time, "dd")).append("/");
        path.append(DateUtil.getDate(time, "HH")).append("/");
        path.append(DateUtil.getDate(time, "mm")).append("/");
        String qrUrl = QrCodeUtil.createQrCode(payMap.get("code_url"), payProperties.wxQrCodePath + path, chargeForm.getOrderNum());
        return payProperties.wxQrCodeUrl + path + qrUrl;
    }

    public Map<String,Object> createOnlineWeiXinOrder(String orderNum,String checkId,int rechargeCoin,String ip) throws Exception {
        OnlineRechargeRecord record = onlineRechargeRecordDao.getByOrderNum(orderNum);
        if (null == record) record = rechargeUtil.create(orderNum, checkId, rechargeCoin, Constants.RECHARGE_WX);
        Map<String, String> map = new LinkedHashMap<>();
        List<String> list = new LinkedList<>();
        WeiXinPayDto weiXinPayDto = new WeiXinPayDto();
        list.add("appid");
        map.put("appid", payProperties.wxAppId);
        weiXinPayDto.setAppid(payProperties.wxAppId);
        list.add("mch_id");
        map.put("mch_id", payProperties.wxMchId);
        weiXinPayDto.setMch_id(payProperties.wxMchId);
        list.add("device_info");
        map.put("device_info", "WEB");
        weiXinPayDto.setDevice_info("WEB");
        list.add("nonce_str");
        String nonceStr = rechargeUtil.createNonceStr();
        map.put("nonce_str", nonceStr);
        weiXinPayDto.setNonce_str(nonceStr);
        list.add("body");
        String subject = "PP在线改重充值";
        map.put("body", subject);
        weiXinPayDto.setBody(subject);
        list.add("attach");
        map.put("attach", checkId);
        weiXinPayDto.setAttach(checkId);
        list.add("out_trade_no");
        map.put("out_trade_no", orderNum);
        weiXinPayDto.setOut_trade_no(orderNum);
        list.add("total_fee");
        DecimalFormat df = new DecimalFormat("#0");
        String totalAmount = df.format(record.getRechargeMoney().doubleValue() * 100);
        map.put("total_fee", totalAmount);
        weiXinPayDto.setTotal_fee(totalAmount);
        list.add("spbill_create_ip");
        map.put("spbill_create_ip", ip);
        weiXinPayDto.setSpbill_create_ip(ip);
        list.add("time_start");
        String startTime = DateUtil.getDate(new Date(), "yyyyMMddHHmmss");
        map.put("time_start", startTime);
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.MINUTE, 10);
        weiXinPayDto.setTime_start(startTime);
        list.add("time_expire");
        String endTime = DateUtil.getDate(calendar.getTime(), "yyyyMMddHHmmss");
        map.put("time_expire", endTime);
        weiXinPayDto.setTime_expire(endTime);
        list.add("notify_url");
        map.put("notify_url", payProperties.wxOnlineNotifyUrl);
        weiXinPayDto.setNotify_url(payProperties.wxOnlineNotifyUrl);

        list.add("trade_type");
        map.put("trade_type", payProperties.wxTradeType);
        weiXinPayDto.setTrade_type(payProperties.wxTradeType);
        list.add("product_id");
        map.put("product_id", payProperties.wxProductId);
        weiXinPayDto.setProduct_id(payProperties.wxProductId);
        list.add("limit_pay");
        map.put("limit_pay", payProperties.wxLimitPay);
        weiXinPayDto.setLimit_pay(payProperties.wxLimitPay);
        String sign = weiPaySign(map, list, payProperties.wxApiKey);
        map.put("sign", sign);
        weiXinPayDto.setSign(sign);
        xstream.alias("xml", WeiXinPayDto.class);
        String params = xstream.toXML(weiXinPayDto);
        params = StringUtils.replace(params, "__", "_");
        logger.info("支付请求参数params={}", params);
        String result = HttpClientUtil.doHttpPost(payProperties.wxGateway, params);
        logger.info("支付结果result={}", result);
        InputStream inputStream = new ByteArrayInputStream(result.getBytes("UTF-8"));
        Map<String, String> payMap = parseXml(inputStream);
        Date time = new Date();
        StringBuffer path = new StringBuffer("");
        path.append(DateUtil.getDate(time, "yyyy")).append("/");
        path.append(DateUtil.getDate(time, "MM")).append("/");
        path.append(DateUtil.getDate(time, "dd")).append("/");
        path.append(DateUtil.getDate(time, "HH")).append("/");
        path.append(DateUtil.getDate(time, "mm")).append("/");
        String qrUrl = QrCodeUtil.createQrCode(payMap.get("code_url"), payProperties.wxQrCodePath + path, orderNum);
        String url = payProperties.wxQrCodeUrl + path + qrUrl;
        Map<String,Object> reMap = new HashMap<>();
        reMap.put("qrUrl",url);
        reMap.put("orderNum",orderNum);
        reMap.put("amount",record.getRechargeMoney());
        return reMap;
    }

    public String createTbAgentWxOrder(ChargeForm chargeForm, TaobaoWxConfig config) throws Exception {
        TaobaoPayRecord record = taobaoPayRecordUtil.getByOrderNum(chargeForm.getOrderNum());
        if (null == record) taobaoPayRecordUtil.create(chargeForm);
        Map<String, String> map = new LinkedHashMap<>();
        List<String> list = new LinkedList<>();
        WeiXinPayDto weiXinPayDto = new WeiXinPayDto();
        list.add("appid");
        map.put("appid", config.getAppId());
        weiXinPayDto.setAppid(config.getAppId());
        list.add("mch_id");
        map.put("mch_id", config.getMchId());
        weiXinPayDto.setMch_id(config.getMchId());
        list.add("device_info");
        map.put("device_info", "WEB");
        weiXinPayDto.setDevice_info("WEB");
        list.add("nonce_str");
        String nonceStr = rechargeUtil.createNonceStr();
        map.put("nonce_str", nonceStr);
        weiXinPayDto.setNonce_str(nonceStr);
        list.add("body");
        map.put("body", chargeForm.getSubject());
        weiXinPayDto.setBody(chargeForm.getSubject());
        list.add("attach");
        map.put("attach", chargeForm.getUserId() + "");
        weiXinPayDto.setAttach(chargeForm.getUserId() + "");
        list.add("out_trade_no");
        map.put("out_trade_no", chargeForm.getOrderNum());
        weiXinPayDto.setOut_trade_no(chargeForm.getOrderNum());
        list.add("total_fee");
        DecimalFormat df = new DecimalFormat("#0");
        String totalAmount = df.format(chargeForm.getAmount().doubleValue()*100);
//        String totalAmount = "1";
        map.put("total_fee", totalAmount);
        weiXinPayDto.setTotal_fee(totalAmount);
        list.add("spbill_create_ip");
        map.put("spbill_create_ip", chargeForm.getUserIp());
        weiXinPayDto.setSpbill_create_ip(chargeForm.getUserIp());
        list.add("time_start");
        String startTime = DateUtil.getDate(new Date(), "yyyyMMddHHmmss");
        map.put("time_start", startTime);
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.MINUTE, 10);
        weiXinPayDto.setTime_start(startTime);
        list.add("time_expire");
        String endTime = DateUtil.getDate(calendar.getTime(), "yyyyMMddHHmmss");
        map.put("time_expire", endTime);
        weiXinPayDto.setTime_expire(endTime);
        list.add("notify_url");
        map.put("notify_url", payProperties.wxTbAgentNotifyUrl);
        weiXinPayDto.setNotify_url(payProperties.wxTbAgentNotifyUrl);
        list.add("trade_type");
        map.put("trade_type", payProperties.wxTradeType);
        weiXinPayDto.setTrade_type(payProperties.wxTradeType);
        list.add("product_id");
        map.put("product_id", payProperties.wxProductId);
        weiXinPayDto.setProduct_id(payProperties.wxProductId);
        list.add("limit_pay");
        map.put("limit_pay", payProperties.wxLimitPay);
        weiXinPayDto.setLimit_pay(payProperties.wxLimitPay);
        String sign = weiPaySign(map, list,config.getApiKey());
        map.put("sign", sign);
        weiXinPayDto.setSign(sign);
        xstream.alias("xml", WeiXinPayDto.class);
        String params = xstream.toXML(weiXinPayDto);
        params = StringUtils.replace(params, "__", "_");
        logger.info("支付请求参数params={}", params);
        String result = HttpClientUtil.doHttpPost(payProperties.wxGateway, params);
        logger.info("支付结果result={}", result);
        InputStream inputStream = new ByteArrayInputStream(result.getBytes("UTF-8"));
        Map<String, String> payMap = parseXml(inputStream);
        Date time = new Date();
        StringBuffer path = new StringBuffer("");
        path.append(DateUtil.getDate(time, "yyyy")).append("/");
        path.append(DateUtil.getDate(time, "MM")).append("/");
        path.append(DateUtil.getDate(time, "dd")).append("/");
        path.append(DateUtil.getDate(time, "HH")).append("/");
        path.append(DateUtil.getDate(time, "mm")).append("/");
        String qrUrl = QrCodeUtil.createQrCode(payMap.get("code_url"), payProperties.wxQrCodePath + path, chargeForm.getOrderNum());
        return payProperties.wxQrCodeUrl + path + qrUrl;
    }

    public SortedMap<String, String> parseXmlToMap(InputStream inputStream) throws Exception {
        // 将解析结果存储在HashMap中
        SortedMap<String, String> map = new TreeMap<>();
        // 从request中取得输入流
        // 读取输入流
        SAXReader reader = new SAXReader();
        Document document = reader.read(inputStream);
        // 得到xml根元素
        Element root = document.getRootElement();
        // 得到根元素的所有子节点
        List<Element> elementList = root.elements();
        // 遍历所有子节点
        for (Element e : elementList)
            map.put(e.getName(), e.getText());
        // 释放资源
        inputStream.close();
        inputStream = null;
        return map;
    }

    public boolean wxNotify(SortedMap<String, String> paramsMap) throws IOException {
        //签名拼接，需要去掉返回的签名串字段sign
        if (isTencentPaySign(paramsMap)) {
            //通过微信支付签名检验
            logger.info("当前支付请求校验通过returnCode={},returnCode={},", paramsMap.get("result_code"), paramsMap.get("return_code"));
            if (StringUtils.equals("SUCCESS", paramsMap.get("return_code")) && StringUtils.equals("SUCCESS", paramsMap.get("result_code"))) {
                //支付成功
                String orderNum = paramsMap.get("out_trade_no");
                String tradeNum = paramsMap.get("transaction_id");
                Double totalFee = Double.valueOf(paramsMap.get("total_fee"))/100;
                DecimalFormat df = new DecimalFormat("#0.00");
                String totalFeeStr = df.format(totalFee);
                return rechargeUtil.updateRechargeStatus(orderNum, tradeNum, totalFeeStr);
            }
        } else {
            logger.warn("微信支付签名检验失败,params={}", paramsMap.toString());
        }
        return false;
    }

    public boolean wxFastCheckNotify(SortedMap<String, String> paramsMap) throws Exception {
        //签名拼接，需要去掉返回的签名串字段sign
        if (isTencentPaySign(paramsMap)) {
            //通过微信支付签名检验
            logger.info("当前支付请求校验通过returnCode={},returnCode={},", paramsMap.get("result_code"), paramsMap.get("return_code"));
            if (StringUtils.equals("SUCCESS", paramsMap.get("return_code")) && StringUtils.equals("SUCCESS", paramsMap.get("result_code"))) {
                //支付成功
                String orderNum = paramsMap.get("out_trade_no");
                String tradeNum = paramsMap.get("transaction_id");
                Double totalFee = Double.valueOf(paramsMap.get("total_fee"))/100;
                DecimalFormat df = new DecimalFormat("#0.00");
                String totalFeeStr = df.format(totalFee);
                return rechargeUtil.updateFastCheckRechargeStatus(orderNum, tradeNum, totalFeeStr);
            }
        } else {
            logger.warn("微信支付签名检验失败,params={}", paramsMap.toString());
        }
        return false;
    }

    public boolean tbAgentNotify(SortedMap<String, String> paramsMap) throws Exception {
        //签名拼接，需要去掉返回的签名串字段sign
        if (isTencentPaySign(paramsMap)) {
            //通过微信支付签名检验
            logger.info("当前支付请求校验通过returnCode={},returnCode={},", paramsMap.get("result_code"), paramsMap.get("return_code"));
            if (StringUtils.equals("SUCCESS", paramsMap.get("return_code")) && StringUtils.equals("SUCCESS", paramsMap.get("result_code"))) {
                //支付成功
                String orderNum = paramsMap.get("out_trade_no");
                String tradeNum = paramsMap.get("transaction_id");
                Double totalFee = Double.valueOf(paramsMap.get("total_fee"))/100;
                DecimalFormat df = new DecimalFormat("#0.00");
                String totalFeeStr = df.format(totalFee);
                return taobaoPayRecordUtil.updateRechargeStatus(orderNum, tradeNum, totalFeeStr);
            }
        } else {
            logger.warn("微信支付签名检验失败,params={}", paramsMap.toString());
        }
        return false;
    }

    public boolean wxOnlineNotify(SortedMap<String, String> paramsMap) throws Exception {
        //签名拼接，需要去掉返回的签名串字段sign
        if (isTencentPaySign(paramsMap)) {
            //通过微信支付签名检验
            logger.info("当前支付请求校验通过returnCode={},returnCode={},", paramsMap.get("result_code"), paramsMap.get("return_code"));
            if (StringUtils.equals("SUCCESS", paramsMap.get("return_code")) && StringUtils.equals("SUCCESS", paramsMap.get("result_code"))) {
                //支付成功
                String orderNum = paramsMap.get("out_trade_no");
                String tradeNum = paramsMap.get("transaction_id");
                Double totalFee = Double.valueOf(paramsMap.get("total_fee"))/100;
                DecimalFormat df = new DecimalFormat("#0.00");
                String totalFeeStr = df.format(totalFee);
                return onlineAliPayUtil.updateRechargeStatus(orderNum, tradeNum, totalFeeStr);
            }
        } else {
            logger.warn("微信支付签名检验失败,params={}", paramsMap.toString());
        }
        return false;
    }

    public boolean isTencentPaySign(SortedMap<String, String> parameters) {
        StringBuffer sb = new StringBuffer();
        Set es = parameters.entrySet();
        Iterator it = es.iterator();
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            String key = (String) entry.getKey();
            String value = (String) entry.getValue();
            if (!"sign".equals(key) && null != key && !"".equals(key)) {
                sb.append(key + "=" + value + "&");
            }
            logger.info("当前参数信息name={},value={}", key, value);
        }

        sb.append("key=" + payProperties.wxApiKey);
        logger.info("支付返回时签名前params={}", sb.toString());
        String sign = MD5Utils.getMD5StringUtf8(sb.toString()).toUpperCase();
        String tenpaySign = parameters.get("sign").toUpperCase();
        return tenpaySign.equals(sign);
    }

    public RechargeRecordVo findByOrderNum(String orderNum) {
        return rechargeUtil.getByOrderNum(orderNum);
    }

    ////////////////////////////////////////////////微信支付/////////////////////////////////////////////////////////////////////////
    private String weiPaySign(Map<String, String> map, List<String> list, String wxApiKey) throws UnsupportedEncodingException {
        Collections.sort(list);
        StringBuffer params = new StringBuffer("");
        for (String param : list) {
            params.append(param).append("=").append(map.get(param)).append("&");
        }
        params.append("key=").append(wxApiKey);
        logger.info("签名前参数顺序为params={}", params.toString());
        String sign = MD5Utils.getMD5StringUtf8(params.toString()).toUpperCase();
        return sign;
    }

    /**
     * 扩展xstream，使其支持CDATA块
     */
    public XStream xstream = new XStream(new XppDriver(new XmlFriendlyNameCoder("__", "_")) {
        public HierarchicalStreamWriter createWriter(Writer out) {
            return new PrettyPrintWriter(out) {
                // 对所有xml节点的转换都增加CDATA标记
                boolean cdata = true;

                public void startNode(String name, Class clazz) {
                    super.startNode(name, clazz);
                }

                protected void writeText(QuickWriter writer, String text) {
                    if (cdata) {
                        writer.write("<![CDATA[");
                        writer.write(text);
                        writer.write("]]>");
                    } else {
                        writer.write(text);
                    }
                }
            };
        }
    });

    /**
     * 解析微信发来的请求（XML）
     *
     * @param inputStream
     * @return
     * @throws Exception
     */
    public Map<String, String> parseXml(InputStream inputStream) throws Exception {
        // 将解析结果存储在HashMap中
        Map<String, String> map = new HashMap<String, String>();
        // 从request中取得输入流
        // 读取输入流
        SAXReader reader = new SAXReader();
        Document document = reader.read(inputStream);
        // 得到xml根元素
        Element root = document.getRootElement();
        // 得到根元素的所有子节点
        List<Element> elementList = root.elements();

        // 遍历所有子节点
        for (Element e : elementList)
            map.put(e.getName(), e.getText());
        // 释放资源
        inputStream.close();
        inputStream = null;
        return map;
    }
}
