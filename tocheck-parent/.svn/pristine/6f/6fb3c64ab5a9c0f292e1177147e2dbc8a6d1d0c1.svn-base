package com.tocheck.parent.core.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.tocheck.parent.common.constans.Constants;
import com.tocheck.parent.common.util.CommonUtil;
import com.tocheck.parent.common.util.MD5Utils;
import com.tocheck.parent.core.dao.IAgentUserDao;
import com.tocheck.parent.core.entity.AgentUser;
import com.tocheck.parent.core.service.AgentUserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author pangliang
 * @create 2017-06-14 11:27
 **/
@Service
public class AgentUserServiceImpl implements AgentUserService {

    @Autowired
    private IAgentUserDao agentUserDao;

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public AgentUser insert(AgentUser agentUser) {
        agentUser.setPassword(MD5Utils.getMD5String(agentUser.getPassword()));
        agentUserDao.insert(agentUser);
        Map<String, Object> param = new HashMap<>();
        param.put("id", agentUser.getId());
        param.put("url", Constants.AGENT_URL.replace("{0}", String.valueOf(CommonUtil.encodeUserId(agentUser.getId()))));
        agentUserDao.updateByMap(param);
        return agentUserDao.getById(agentUser.getId());
    }

    @Override
    public AgentUser getById(long id) {
        return agentUserDao.getById(id);
    }

    @Override
    public AgentUser validateLogin(String userName, String password, boolean isRoot) {
        Map<String, Object> param = new HashMap<>();
        param.put("userName", userName);
        param.put("password", MD5Utils.getMD5String(password));
        param.put("isRoot", isRoot);
        List<AgentUser> list = agentUserDao.getByMap(param);
        if (!list.isEmpty()) {
            return list.get(0);
        }
        return null;
    }

    @Override
    public AgentUser getByUserName(String userName) {
        Map<String, Object> param = new HashMap<>();
        param.put("userName", userName);
        List<AgentUser> list = agentUserDao.getByMap(param);
        if (!list.isEmpty()) {
            return list.get(0);
        }
        return null;
    }

    @Override
    public AgentUser modifyInfo(AgentUser agentUser) {
        Map<String, Object> param = new HashMap<>();
        param.put("alipayAccount", agentUser.getAlipayAccount());
        param.put("systemIds", agentUser.getSystemIds());
        param.put("systemNames", agentUser.getSystemNames());
        param.put("majorIds", agentUser.getMajorIds());
        param.put("majorNames", agentUser.getMajorNames());
        param.put("id", agentUser.getId());
        agentUserDao.updateByMap(param);
        return agentUser;
    }

    @Override
    public PageInfo<AgentUser> listPage(Integer p) {
        PageHelper.startPage(p, Constants.PAGE_LIMIT);
        Map<String, Object> param = new HashMap<>();
        param.put("isRoot",false);
        List<AgentUser> list = agentUserDao.getByMap(param);
        return new PageInfo<>(list);
    }

    @Override
    public void auditAgent(long id, int status) {
        Map<String, Object> param = new HashMap<>();
        param.put("id", id);
        param.put("status", status);
        agentUserDao.updateByMap(param);
    }
}
