package com.paperpass.parent.web.controller;

import com.alibaba.fastjson.JSONObject;
import com.paperpass.parent.common.common.Constants;
import com.paperpass.parent.common.dto.*;
import com.paperpass.parent.common.util.*;
import com.paperpass.parent.core.common.WebProperties;
import com.paperpass.parent.core.service.web.WebUserService;
import com.paperpass.parent.core.vo.web.WebUserVo;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;

/**
 * @author pangliang
 * @create 2016-12-07 18:26
 **/
@Controller
public class ThirdPartyLoginCtrl extends BaseController {

    private static final Logger logger = LoggerFactory.getLogger(ThirdPartyLoginCtrl.class);

    @Autowired
    private WebUserService webUserService;

    @Autowired
    private WebProperties webProperties;

    @Autowired
    protected WechatUtil wechatUtil;

    @RequestMapping("/user/qqLogin")
    public String qqlogin(HttpServletRequest request, QQLoginDto loginDto) {
        try {
            if (StringUtils.isAnyBlank(loginDto.getState())) {
                String state = "0";
                String qqLoginUrl = QQUtil.qqOauthUrl(webProperties.qqAppId, webProperties.qqRedirectUrl, "get_user_info", state);
                return "redirect:" + qqLoginUrl;
            }
            if (StringUtils.isNoneBlank(loginDto.getCode())) {
                String token = QQUtil.getAccessToken(webProperties.qqAppId, webProperties.qqAppKey, loginDto.getCode(), webProperties.qqRedirectUrl, "qq_access_token");
                loginDto.setAccess_token(token);
            }
            if (StringUtils.isNoneBlank(loginDto.getAccess_token())) {
                JSONObject jsonObject = QQUtil.getOpenId(loginDto.getAccess_token());
                String openId = jsonObject.getString("openid");
                if (StringUtils.isNoneBlank(openId)) {
                    WebUserVo webUser = webUserService.getByLoginType(openId, Constants.LOGIN_TYPE_QQ);
                    if (null == webUser) {
                        JSONObject userJson = QQUtil.getUserInfo(loginDto.getAccess_token(), webProperties.qqAppId, openId);
                        webUser = new WebUserVo();
                        webUser.setUserName(getQuickLoginUsername(userJson.getString("nickname")));
                        webUser.setOpenId(openId);
                        webUser.setPassword(MD5Utils.getMD5String(Constants.COMMON_PWD));
                        webUser.setLoginType(Constants.LOGIN_TYPE_QQ);
                        webUser.setRecharge(BigDecimal.ZERO);
                        webUser.setBalance(BigDecimal.ZERO);
                        webUser.setCreateTime(DateUtil.current());
                        this.webUserService.createWebUser(webUser);
                    }
                    this.saveSessionUserInfo(webUser, request);
                    return "redirect:/checkTask/submit.html";
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "redirect:/index.html";
    }

    @RequestMapping("/user/weiBoLogin")
    public String weiboLogin(String code, HttpServletRequest request) throws UnsupportedEncodingException {
        if (StringUtils.isAnyBlank(code)) {
            String weiBoOauthUrl = WeiboUtil.weiBoOauthUrl(webProperties.weiBoAppKey,
                    webProperties.weiBoRedirectUrl);
            return "redirect:" + weiBoOauthUrl;
        }
        String accessToken = ssdbUtils.getValue(this.requestCookieId(request) + Constants.WEI_BO_ASSESS_TOKEN);
        WeiboAccessTokenDto accessTokenDto = null;
        if (StringUtils.isEmpty(accessToken)) {
            accessToken = WeiboUtil.getAccessToken(webProperties.weiBoAppKey, webProperties
                    .weiBoAppSecret, webProperties.weiBoRedirectUrl, code);

            accessTokenDto = JSONObject.parseObject(accessToken, WeiboAccessTokenDto.class);
            ssdbUtils.save(this.requestCookieId(request) + Constants.WEI_BO_ASSESS_TOKEN, accessToken,
                    Integer.parseInt(accessTokenDto.getExpires_in()));
        }
        logger.info("微博accessToken={}", accessToken);

        if (accessTokenDto == null) {
            accessTokenDto = JSONObject.parseObject(accessToken, WeiboAccessTokenDto.class);
        }
        logger.info("微博登录返回accessTokenDto={}", accessTokenDto.toString());

        String userJson = WeiboUtil.getUserInfo(accessTokenDto.getAccess_token(), accessTokenDto.getUid());
        WeiboUserInfoDto dto = JSONObject.parseObject(userJson, WeiboUserInfoDto.class);
        logger.info("微博登录信息WeiboUserInfoDto={}", JSONObject.toJSONString(dto));

        if (StringUtils.isNoneBlank(dto.getId())) {
            WebUserVo webUser = webUserService.getByLoginType(dto.getId(), Constants.LOGIN_TYPE_WB);
            if (null == webUser) {
                webUser = new WebUserVo();
                webUser.setOpenId(accessTokenDto.getUid());
                webUser.setUserName(getQuickLoginUsername(dto.getScreen_name()));
                webUser.setPassword(MD5Utils.getMD5String(Constants.COMMON_PWD));
                webUser.setLoginType(Constants.LOGIN_TYPE_WB);
                webUser.setRecharge(BigDecimal.ZERO);
                webUser.setBalance(BigDecimal.ZERO);
                webUser.setCreateTime(DateUtil.current());
                try {
                    this.webUserService.createWebUser(webUser);
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.error("微博登录保存用户失败...{}", e);
                }
            }
            this.saveSessionUserInfo(webUser, request);
        } else {
            return "获取您的微博信息失败!";
        }
        return "redirect:/checkTask/submit.html";
    }

    @RequestMapping(value = "/user/weChatLogin", method = RequestMethod.GET)
    public String weChatLogin(String code, String state, HttpServletRequest request) {
        logger.info("微信登录回调,code={},state={}", code, state);
        if (StringUtils.isEmpty(code) || StringUtils.isEmpty(state)) {
            return "login";
        }
        String openid = ssdbUtils.getValue(this.requestCookieId(request) + Constants.WEI_XIN_OPENID);
        String access_token = ssdbUtils.getValue(this.requestCookieId(request) + Constants.WEI_XIN_ASSESS_TOKEN);
        if (StringUtils.isEmpty(openid) || StringUtils.isEmpty(access_token)) {
            String accessTokenStr = wechatUtil.getAccessToken(webProperties.weChatAppId, webProperties.weChatSecret, code);
            WechatAccessTokenDto dto = JSONObject.parseObject(accessTokenStr, WechatAccessTokenDto.class);
            logger.info("loginWechat.getAccessToken:{}", accessTokenStr);
            openid = dto.getOpenid();
            access_token = dto.getAccess_token();
            ssdbUtils.save(this.requestCookieId(request) + Constants.WEI_XIN_ASSESS_TOKEN, dto.getAccess_token(),
                    dto.getExpires_in());
            ssdbUtils.save(this.requestCookieId(request) + Constants.WEI_XIN_OPENID, dto.getOpenid(),
                    dto.getExpires_in());
        }
        if (StringUtils.isNotEmpty(openid) && StringUtils.isNotEmpty(access_token)) {
            String userJson = wechatUtil.getUserInfo(access_token, openid);
            WechatUserInfoDto userInfoDto = JSONObject.parseObject(userJson, WechatUserInfoDto.class);
            if (userInfoDto.getOpenid() != null) {
                WebUserVo webUser = webUserService.getByLoginType(userInfoDto.getOpenid(), Constants.LOGIN_TYPE_WX);
                if (null == webUser) {
                    webUser = new WebUserVo();
                    webUser.setOpenId(userInfoDto.getOpenid());
                    webUser.setUserName(getQuickLoginUsername(userInfoDto.getNickname()));
                    webUser.setPassword(MD5Utils.getMD5String(Constants.COMMON_PWD));
                    webUser.setLoginType(Constants.LOGIN_TYPE_WX);
                    webUser.setRecharge(BigDecimal.ZERO);
                    webUser.setBalance(BigDecimal.ZERO);
                    webUser.setCreateTime(DateUtil.current());
                    try {
                        this.webUserService.createWebUser(webUser);
                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.error("微信登录保存用户失败...{}", e);
                    }
                }
                this.saveSessionUserInfo(webUser, request);
            } else {
                return "获取您的微信信息失败!";
            }
        }
        return "redirect:/checkTask/submit.html";
    }

    /**
     * 生成第三方快登账号用户名，取原始昵称中的汉字、数字和英文字母，追加3到6个随机数字组成新用户名，原始昵称全部是特殊字符的，以pt+6个随机数字组成新用户名
     *
     * @param nickname 第三方快登账号原始昵称
     * @return papertime新昵称
     */
    private String getQuickLoginUsername(String nickname) {
        nickname = nickname.replaceAll(CommonUtil.REG_FILTER_NICKNAME, "");
        int length = nickname.length();
        int count = 3;
        if (length < 3) {
            count = 6 - length;
            if (length == 0) {
                nickname = "paperpass";
            }
        }
        String userName = nickname + RandomStringUtils.randomNumeric(count);
        while (webUserService.getByUserName(userName) != null) {
               userName = nickname + RandomStringUtils.randomNumeric(count);
        }
        return userName;
    }
}
