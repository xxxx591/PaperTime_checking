package com.paperpass.parent.core.utils;

import com.alibaba.fastjson.JSON;
import com.paperpass.parent.common.common.Constants;
import com.paperpass.parent.common.util.BaseOptionUtils;
import com.paperpass.parent.common.util.MD5Utils;
import com.paperpass.parent.common.util.SSDBUtils;
import com.paperpass.parent.core.dao.common.ICheckTaskDao;
import com.paperpass.parent.core.dao.common.IRechargeRecordDao;
import com.paperpass.parent.core.dao.online.IOnlineRechargeRecordDao;
import com.paperpass.parent.core.dao.tb.ITaobaoSellerDao;
import com.paperpass.parent.core.dao.web.IFreeActivityDao;
import com.paperpass.parent.core.dao.web.IUserActivityDao;
import com.paperpass.parent.core.dao.web.IWebUserDao;
import com.paperpass.parent.core.dto.ChargeForm;
import com.paperpass.parent.core.entity.common.CheckTask;
import com.paperpass.parent.core.entity.common.RechargeRecord;
import com.paperpass.parent.core.entity.online.OnlineRechargeRecord;
import com.paperpass.parent.core.entity.web.FreeActivity;
import com.paperpass.parent.core.entity.web.UserActivity;
import com.paperpass.parent.core.vo.common.CheckTaskVo;
import com.paperpass.parent.core.vo.common.RechargeRecordVo;
import com.paperpass.parent.core.vo.tb.TaoBaoSellerVo;
import com.paperpass.parent.core.vo.web.WebUserVo;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.*;

/**
 * @author pangliang
 * @create 2017-03-24 10:39
 **/
@Component
public class RechargeUtil {

    @Autowired
    private IRechargeRecordDao rechargeRecordDao;

    @Autowired
    private IWebUserDao webUserDao;

    @Autowired
    private ITaobaoSellerDao taobaoSellerDao;

    @Autowired
    private SSDBUtils ssdbUtils;

    @Autowired
    private ICheckTaskDao checkTaskDao;

    @Autowired
    private IUserActivityDao userActivityDao;

    @Autowired
    private IFreeActivityDao freeActivityDao;

    @Autowired
    private IOnlineRechargeRecordDao onlineRechargeRecordDao;

    private static final int hostNum = Constants.HOST_NUM;

    private static int checkCount = 0;

    private Logger logger = LoggerFactory.getLogger(RechargeUtil.class);

    public RechargeRecordVo getByOrderNum(String orderNum) {
        return rechargeRecordDao.getByOrderNum(orderNum);
    }

    public RechargeRecordVo create(ChargeForm chargeForm) {
        RechargeRecord rechargeRecord = new RechargeRecord();
        rechargeRecord.setOrderNum(chargeForm.getOrderNum());
        rechargeRecord.setTradeNum("");
        rechargeRecord.setCreateTime(new Date());
        rechargeRecord.setPayTime(null);
        rechargeRecord.setStatus(Constants.WAIT_PAY_STATUS);
        rechargeRecord.setRechargeMoney(chargeForm.getAmount());
        BigDecimal coin = BigDecimal.ZERO;
        if (chargeForm.getUserId() > Constants.TAOBAO_AGENTS_ADD_ID) {
            coin = chargeForm.getAmount().multiply(BigDecimal.valueOf(Constants.AGENTS_NUM));
        }
        rechargeRecord.setRechargeCoin(coin.intValue());
        rechargeRecord.setGoodsNum(0);
        rechargeRecord.setUserId(chargeForm.getUserId());
        rechargeRecord.setDeleteStatus(Constants.STATE_ENABLE);
        rechargeRecordDao.createRechargeRecord(rechargeRecord);
        RechargeRecordVo rechargeRecordVo = new RechargeRecordVo();
        BeanUtils.copyProperties(rechargeRecord, rechargeRecordVo);
        return rechargeRecordVo;
    }

    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
    public Boolean updateRechargeStatus(String outTradeNo, String tradeNum, String totalFee) throws IOException {
        RechargeRecordVo rechargeRecord = rechargeRecordDao.getByOrderNum(outTradeNo);
//        totalFee = rechargeRecord.getRechargeMoney().toString();
        if (rechargeRecord.getStatus().compareTo(Constants.WAIT_PAY_STATUS) == 0) {
            updateRechargeRecord(rechargeRecord, tradeNum, totalFee);
            Map<String, Object> paramMap = new LinkedHashMap<>();
            if (rechargeRecord.getUserId() > Constants.TAOBAO_AGENTS_ADD_ID) {   //更新淘宝代理商账号
                TaoBaoSellerVo sellerVo = taobaoSellerDao.getById(rechargeRecord.getUserId() - Constants.TAOBAO_AGENTS_ADD_ID);
                if (sellerVo == null) return false;
                paramMap.put("id", sellerVo.getId());
                paramMap.put("rechargeMoney", sellerVo.getRechargeMoney().add(new BigDecimal(totalFee)));
                paramMap.put("balance", sellerVo.getBalance() + Double.valueOf(totalFee) * Constants.AGENTS_NUM);
                taobaoSellerDao.updateTaobaoSeller(paramMap);
            } else {   //更新普通会员账户
                WebUserVo user = webUserDao.getById(rechargeRecord.getUserId());
                if (user == null) return false;
                BigDecimal balance = user.getBalance().add(new BigDecimal(totalFee));
                paramMap.put("id", user.getId());
                paramMap.put("recharge", user.getRecharge().add(new BigDecimal(totalFee)));
                paramMap.put("balance", balance);
                UserActivity activity = userActivityDao.getByUserId(user.getId());
                //当用户参与了活动并且审核通过了并且一次性充值金额大于等于10元
                if (activity != null && activity.getStatus() == Constants.ACTIVITY_STATUS_PASS && Double.valueOf(totalFee) >= 10) {
                    FreeActivity freeActivity = freeActivityDao.getById(activity.getActId());
                    if (freeActivity != null) {
                        paramMap.put("balance", balance.add(freeActivity.getCash()));

                        //修改状态为已充值
                        Map<String, Object> activityParam = new HashMap<>();
                        activityParam.put("id", activity.getId());
                        activityParam.put("status", Constants.ACTIVITY_STATUS_FINISH);
                        userActivityDao.updateByMap(activityParam);
                    }
                }
                webUserDao.updateWebUser(paramMap);
                logger.info("网站用户支付宝异步返回时更新信息:recharge={},webUser={}", new Object[]{rechargeRecord.toString(), user.toString()});
            }
            return true;
        }
        return false;
    }

    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
    public Boolean updateFastCheckRechargeStatus(String outTradeNo, String tradeNum, String totalFee) throws Exception {
        RechargeRecordVo rechargeRecord = rechargeRecordDao.getByOrderNum(outTradeNo);
//        totalFee = rechargeRecord.getRechargeMoney().toString();
        if (rechargeRecord.getStatus().compareTo(Constants.WAIT_PAY_STATUS) == 0) {
            updateRechargeRecord(rechargeRecord, tradeNum, totalFee);
            String value = ssdbUtils.getValue(rechargeRecord.getOrderNum() + "checkTaskVo");
            CheckTaskVo checkTaskVo = JSON.parseObject(value,CheckTaskVo.class);

            CheckTask task = new CheckTask();
            PropertyUtils.copyProperties(task, checkTaskVo);
            task.setTitle(StringUtils.isBlank(checkTaskVo.getTitle()) ? "我的论文" : checkTaskVo.getTitle());
            task.setAuthor(StringUtils.isBlank(checkTaskVo.getAuthor()) ? "PaperPass" : checkTaskVo.getAuthor());
            task.setDocCheckId(UserPaperUtils.generateDocCheckId(rechargeRecord.getUserId()));
            task.setReportId(RandomStringUtils.randomAlphanumeric(16).toUpperCase());
            task.setUserId(rechargeRecord.getUserId());
            task.setContent(checkTaskVo.getPaperContent().hashCode());
            task.setTid(0L);
            int option = 0;
            if (checkTaskVo.getTaskType() == Constants.TASK_TYPE_FILE) {
                option = BaseOptionUtils.addFromWord(option);
            }
            task.setBaseOption(option);
            task.setStatus(Constants.CHECK_STATUS_WAIT);
            task.setError("");
            task.setSimilar(BigDecimal.ZERO);
            task.setProcessId(checkCount % hostNum);
            checkTaskDao.createCheckTask(task);

            ssdbUtils.save(task.getDocCheckId(), checkTaskVo.getPaperContent());
            checkCount++;
            return true;
        }
        return false;
    }
    private void updateRechargeRecord(RechargeRecordVo rechargeRecord, String tradeNum, String totalFee) {
        Map<String, Object> updateMap = new LinkedHashMap<>();
        updateMap.put("tradeNum", tradeNum);
        updateMap.put("payTime", new Date());
        updateMap.put("status", Constants.DONE_PAY_STATUS);
        updateMap.put("rechargeMoney", totalFee);
        if (rechargeRecord.getUserId() > Constants.TAOBAO_AGENTS_ADD_ID) {
            updateMap.put("rechargeCoin", Double.valueOf(totalFee) * Constants.AGENTS_NUM);
        }
        updateMap.put("id", rechargeRecord.getId());
        rechargeRecordDao.updateRechargeRecord(updateMap);
    }

    public String createNonceStr() {
        return MD5Utils.getMD5String(UUID.randomUUID().toString());
    }

    public OnlineRechargeRecord create(String orderNum, String checkId, int rechargeCoin, int payType) {
        BigDecimal money = getRechargeMoney(rechargeCoin);
        OnlineRechargeRecord record = new OnlineRechargeRecord();
        record.setCheckId(Long.parseLong(checkId));
        record.setCreateTime(new Date());
        record.setOrderNum(orderNum);
        record.setTradeNum("");
        record.setPayTime(null);
        record.setRechargeCoin(rechargeCoin);
        record.setStatus(Constants.WAIT_PAY_STATUS);
        record.setRechargeType(payType);
        record.setRechargeMoney(money);
        onlineRechargeRecordDao.createOnlineRechargeRecord(record);
        return record;
    }

    private BigDecimal getRechargeMoney(int rechargeCoin) {
        int base;
        int con = rechargeCoin / 1000;
        int cons = rechargeCoin % 1000;
        if (cons == 0) {
            base = con;
        } else {
            base = con + 1;
        }
        BigDecimal money = new BigDecimal(1.5d).multiply(new BigDecimal(Double.valueOf(base + "")));
        return money;
    }
}
