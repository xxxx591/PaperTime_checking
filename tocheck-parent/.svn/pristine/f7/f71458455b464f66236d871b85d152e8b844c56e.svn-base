package com.tocheck.parent.core.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.tocheck.parent.common.constans.Constants;
import com.tocheck.parent.common.util.CommonUtil;
import com.tocheck.parent.common.util.SSDBUtils;
import com.tocheck.parent.common.util.ToCheckFileUtils;
import com.tocheck.parent.core.dao.IToCheckTaskDao;
import com.tocheck.parent.core.properties.CommonProperties;
import com.tocheck.parent.core.service.ToCheckTaskService;
import com.tocheck.parent.core.vo.ToCheckTaskVo;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author pangliang
 * @create 2017-05-23 16:19
 **/
@Service
public class ToCheckTaskServiceImpl implements ToCheckTaskService {

    @Autowired
    private IToCheckTaskDao toCheckTaskDao;

    @Autowired
    private SSDBUtils ssdbUtils;

    @Override
    public void insert(ToCheckTaskVo toCheckTaskVo) {
        toCheckTaskVo.setTitle(StringUtils.isBlank(toCheckTaskVo.getTitle()) ? "我的论文" : toCheckTaskVo.getTitle());
        toCheckTaskVo.setAuthor(StringUtils.isBlank(toCheckTaskVo.getAuthor()) ? "tochek" : toCheckTaskVo.getAuthor());
        toCheckTaskVo.setCheckId(0L);
        toCheckTaskVo.setWordNum(CommonUtil.contentLength(toCheckTaskVo.getContent(), toCheckTaskVo.getSystemId()));
        toCheckTaskVo.setStatus(Constants.CHECK_STATUS_WAIT);
        toCheckTaskDao.insert(toCheckTaskVo);
        ssdbUtils.save("tocheck-task-" + toCheckTaskVo.getId(), toCheckTaskVo.getContent());
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public Map<String, Object> insertCnki(ToCheckTaskVo toCheckTaskVo, MultipartHttpServletRequest request) throws IOException {
        Map<String, Object> result = new HashMap<>();
        result.put(Constants.RESP_STATE, Constants.RESP_FAIL);
        if (toCheckTaskVo.getSystemId() == null) {
            result.put(Constants.RESP_MESSAGE, "参数错误,请刷新后重试!");
            return result;
        }
        if (StringUtils.isBlank(toCheckTaskVo.getTitle())) {
            result.put(Constants.RESP_MESSAGE, "请输入论文标题!");
            return result;
        }
        if (toCheckTaskVo.getTitle().length() > 100) {
            result.put(Constants.RESP_MESSAGE, "标题请小于100字符!");
            return result;
        }
        if (StringUtils.isBlank(toCheckTaskVo.getAuthor())) {
            result.put(Constants.RESP_MESSAGE, "请输入论文作者!");
            return result;
        }
        if (toCheckTaskVo.getAuthor().length() > 20) {
            result.put(Constants.RESP_MESSAGE, "作者请小于20字符!");
            return result;
        }
        Map<String, MultipartFile> fileMap = request.getFileMap();
        if (fileMap == null || fileMap.isEmpty()) {
            result.put(Constants.RESP_MESSAGE, "请上传您的论文!");
            return result;
        }
        MultipartFile uploadFile = null;
        for (Map.Entry<String, MultipartFile> fileEntry : fileMap.entrySet()) {
            uploadFile = fileEntry.getValue();
            break;
        }
        if (uploadFile == null || !ToCheckFileUtils.isProperPaper(uploadFile.getOriginalFilename())) {
            result.put(Constants.RESP_MESSAGE, "系统仅支持txt、doc、docx格式文档!");
            return result;
        }

        toCheckTaskVo.setTitle(StringUtils.isBlank(toCheckTaskVo.getTitle()) ? "我的论文" : toCheckTaskVo.getTitle());
        toCheckTaskVo.setAuthor(StringUtils.isBlank(toCheckTaskVo.getAuthor()) ? "tochek" : toCheckTaskVo.getAuthor());
        toCheckTaskVo.setCheckId(0L);
        toCheckTaskVo.setWordNum(0);
        toCheckTaskVo.setStatus(Constants.CHECK_STATUS_CHECKING);
        toCheckTaskDao.insert(toCheckTaskVo);
        ToCheckFileUtils.saveMaterialFile(uploadFile, CommonProperties.instance.paper_path, toCheckTaskVo.getId(), toCheckTaskVo.getTitle() + "_" + toCheckTaskVo.getAuthor());
        result.put(Constants.RESP_STATE, Constants.RESP_SUCCESS);
        return result;
    }

    @Override
    public PageInfo<ToCheckTaskVo> canCheckTask(long systemId, int status) {
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put("systemId", systemId);
        paramMap.put("status", status);
        PageHelper.startPage(1, Constants.PAGE_LIMIT);
        List<ToCheckTaskVo> list = toCheckTaskDao.getByMap(paramMap);
        return new PageInfo<>(list);
    }

    @Override
    public void updateTaskStatus(long id, int status) {
        Map<String, Object> param = new HashMap<>();
        param.put("id", id);
        param.put("status", status);
        toCheckTaskDao.updateByMap(param);
    }

    @Override
    public void updateTaskStatus(long id, int status, long checkId) {
        Map<String, Object> param = new HashMap<>();
        param.put("id", id);
        param.put("status", status);
        param.put("checkId", checkId);
        toCheckTaskDao.updateByMap(param);
    }

    @Override
    public void finishCheck(long id, int status, String downUrl) {
        Map<String, Object> param = new HashMap<>();
        param.put("id", id);
        param.put("status", status);
        param.put("downUrl", downUrl);
        toCheckTaskDao.updateByMap(param);
    }

    @Override
    public void updateErrorMsg(long id, String msg) {
        Map<String, Object> param = new HashMap<>();
        param.put("id", id);
        param.put("status", -1);
        param.put("errorMsg", msg);
        toCheckTaskDao.updateByMap(param);
    }
}
