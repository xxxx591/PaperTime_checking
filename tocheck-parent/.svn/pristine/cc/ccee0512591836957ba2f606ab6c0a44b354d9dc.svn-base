package com.tocheck.parent.core.utils;

import com.alibaba.fastjson.JSON;
import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.DefaultAlipayClient;
import com.alipay.api.internal.util.AlipaySignature;
import com.alipay.api.request.AlipayTradePrecreateRequest;
import com.alipay.api.response.AlipayTradePrecreateResponse;
import com.tocheck.parent.common.constans.Constants;
import com.tocheck.parent.common.dto.ChargeForm;
import com.tocheck.parent.common.util.DateUtil;
import com.tocheck.parent.common.util.QrCodeUtil;
import com.tocheck.parent.common.util.ResponseJson;
import com.tocheck.parent.core.properties.PayProperties;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by kchen on 2016/10/26.
 */
@Component
public class AliPayUtil {

    private static final Logger logger = LoggerFactory.getLogger(AliPayUtil.class);

    @Autowired
    private PayProperties payProperties;

    @Autowired
    private RechargeOrderUtil rechargeOrderUtil;

    /**
     * 创建支付宝支付
     *
     * @param chargeForm
     */
    public ResponseJson createAliPayOrder(ChargeForm chargeForm) throws Exception {
        if (null == rechargeOrderUtil.getByOrderNum(chargeForm.getOrderNum())) {
            rechargeOrderUtil.create(chargeForm);
        }
        Map<String, Object> result = new HashMap<>();
        String url = getQRImgUrl(chargeForm);
        if (StringUtils.isNoneBlank(url)) {
            result.put("url", url);
            result.put("orderNum", chargeForm.getOrderNum());
            result.put("amount", chargeForm.getAmount());
            return ResponseJson.body(Constants.RESP_SUCCESS, "1", result);
        } else {
            return ResponseJson.body(Constants.RESP_FAIL, "生成支付二维码失败,请刷新后重试或联系客服!");
        }
    }

    /**
     * 支付成功后的回调，所有支付业务通用
     *
     * @param outTradeNo
     * @param tradeNum
     * @param totalFee
     * @return
     */
    @Transactional(propagation = Propagation.REQUIRED)
    public boolean updateRechargeStatus(String outTradeNo, String tradeNum, String totalFee) throws IOException {
        return rechargeOrderUtil.updateRechargeStatus(outTradeNo, tradeNum, totalFee);
    }

    private String getQRImgUrl(ChargeForm chargeForm) throws Exception {
        AlipayClient alipayClient = getClient();
        AlipayTradePrecreateRequest request = new AlipayTradePrecreateRequest();
        StringBuilder bizContent = new StringBuilder(512);
        bizContent.append("{\"out_trade_no\":\"");
        bizContent.append(chargeForm.getOrderNum());
        bizContent.append("\",\"total_amount\":\"");
//        bizContent.append(chargeForm.getAmount());
        bizContent.append("0.01");
        bizContent.append("\",\"subject\":\"");
        bizContent.append(chargeForm.getSubject());
        bizContent.append("\"}");
        request.setBizContent(bizContent.toString());
        request.setNotifyUrl(payProperties.alipayServiceWindowNotifyUrl);
        logger.info("request={}", JSON.toJSONString(request));
        AlipayTradePrecreateResponse response = alipayClient.execute(request);
        if (response != null && response.isSuccess() && StringUtils.equals("10000", response.getCode())) {
            String timePath = DateUtil.getDate(new Date(), "yyyy/MM/dd/HH/mm/");
            String qrImgName = QrCodeUtil.createQrCode(response.getQrCode(), payProperties.alipayQrCodePath + timePath, chargeForm.getOrderNum());
            return payProperties.alipayQrCodeUrl + timePath + qrImgName;
        }
        return null;
    }

    private AlipayClient getClient() {
        String url = payProperties.aliPayServiceWindowGateway;
        String appId = payProperties.aliPayServiceWindowAppid;
        String privateKey = payProperties.aliPayServiceWindowPrivateKey;
        String publicKey = payProperties.aliPayServiceWindowPublicKey;
        String format = "json";
        String charset = payProperties.aliPayServiceWindowSignCharset;
        String signType = payProperties.aliPayServiceWindowSignType;
        return new DefaultAlipayClient(url, appId, privateKey, format, charset, publicKey, signType);
    }

    public boolean getSignVeryFy(Map<String, String> params) {
        //判断responsetTxt是否为true，isSign是否为true
        //responsetTxt的结果不是true，与服务器设置问题、合作身份者ID、notify_id一分钟失效有关
        //isSign不是true，与安全校验码、请求时的参数格式（如：带自定义参数等）、编码格式有关
        String responseTxt = "true";
        if (params.get("notify_id") != null) {
            String notify_id = params.get("notify_id");
            responseTxt = verifyResponse(notify_id);
        }
        String sign = "";
        if (params.get("sign") != null) {
            sign = params.get("sign");
        }
        boolean isSign = getRSASignVerify(params, sign);

        //写日志记录（若要调试，请取消下面两行注释）
        //String sWord = "responseTxt=" + responseTxt + "\n isSign=" + isSign + "\n 返回回来的参数：" + AlipayCore.createLinkString(params);
        //AlipayCore.logResult(sWord);

        if (isSign && ("true").equals(responseTxt)) {
            return true;
        }
        return false;
    }

    private boolean getRSASignVerify(Map<String, String> Params, String sign) {
        //过滤空值、sign与sign_type参数
        Map<String, String> sParaNew = AlipayCore.paraFilter(Params);
        //获取待签名字符串
        String preSignStr = AlipayCore.createLinkString(sParaNew);
        //获得签名验证结果
        boolean isSign = false;
        try {
            isSign = AlipaySignature.rsa256CheckContent(
                    preSignStr, sign, payProperties.aliPayServiceWindowPublicKey,
                    payProperties.aliPayServiceWindowCharset);
        } catch (AlipayApiException e) {
            e.printStackTrace();
        }

        return isSign;
    }


    private String verifyResponse(String notify_id) {
        //获取远程服务器ATN结果，验证是否是支付宝服务器发来的请求

        String partner = payProperties.alipayServiceWindowPartner;
        String veryfy_url = "https://mapi.alipay.com/gateway.do?service=notify_verify&" + "partner=" + partner + "&notify_id=" + notify_id;

        return checkUrl(veryfy_url);
    }

    private String checkUrl(String urlvalue) {
        String inputLine = "";

        try {
            URL url = new URL(urlvalue);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection
                    .getInputStream()));
            inputLine = in.readLine();
        } catch (Exception e) {
            e.printStackTrace();
            inputLine = "";
        }
        return inputLine;
    }

}