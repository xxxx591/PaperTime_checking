package com.tocheck.parent.web.ctrl;

import com.tocheck.parent.common.constans.Constants;
import com.tocheck.parent.common.util.CommonUtil;
import com.tocheck.parent.common.util.ResponseJson;
import com.tocheck.parent.core.entity.ToCheckSystem;
import com.tocheck.parent.core.service.ToCheckSystemService;
import com.tocheck.parent.core.service.ToCheckTaskService;
import com.tocheck.parent.core.vo.ToCheckTaskVo;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author pangliang
 * @create 2017-05-24 16:35
 **/
@Controller
public class SubmitTaskCtrl {

    private Logger logger = LoggerFactory.getLogger(SubmitTaskCtrl.class);

    @Autowired
    private ToCheckSystemService toCheckSystemService;

    @Autowired
    private ToCheckTaskService toCheckTaskService;

    @RequestMapping(value = "/submitTask/{id:[0-9]+}", method = RequestMethod.GET)
    public String submitTask(@PathVariable long id, Model model) {
        List<ToCheckSystem> list = toCheckSystemService.getAll();
        ToCheckSystem system = toCheckSystemService.getById(id);
        if (system == null) return "redirect:/index.html";
        model.addAttribute("list",list);
        model.addAttribute("system", system);
        if(system.getId()<=3){
            return "submitTask/cnki";
        }else{
            return "submitTask/commons";
        }
    }
    @ResponseBody
    @RequestMapping(value = "/submitTask/commons", method = RequestMethod.POST)
    public ResponseJson paperPass(ToCheckTaskVo checkTaskVo) {
        if (StringUtils.isNotBlank(checkTaskVo.getTitle()) && checkTaskVo.getTitle().length() > 100) {
            return ResponseJson.body(Constants.RESP_FAIL, "标题请小于100字符!");
        }
        if (StringUtils.isNotBlank(checkTaskVo.getAuthor()) && checkTaskVo.getAuthor().length() > 20) {
            return ResponseJson.body(Constants.RESP_FAIL, "作者请小于20字符!");
        }
        if (StringUtils.isBlank(checkTaskVo.getContent())) {
            return ResponseJson.body(Constants.RESP_FAIL, "论文内容不能为空!");
        }
        if (checkTaskVo.getSystemId() == null) {
            return ResponseJson.body(Constants.RESP_FAIL, "参数错误,请刷新后重试!");
        }
        try {
            toCheckTaskService.insert(checkTaskVo);
        } catch (Exception e) {
            logger.error("提交论文失败..e={},systemId={}", e, checkTaskVo.getSystemId());
            return ResponseJson.body(false, "提交失败,请刷新后重试!");
        }
        return ResponseJson.body(Constants.RESP_SUCCESS, "提交成功!");
    }

    @ResponseBody
    @RequestMapping(value = "/submitTask/cnki", method = RequestMethod.POST)
    public Map<String, Object> cnki(ToCheckTaskVo toCheckTaskVo, MultipartHttpServletRequest request) {
        Map<String, Object> result = new HashMap<>();
        result.put(Constants.RESP_STATE, Constants.RESP_FAIL);
        try {
            result.putAll(toCheckTaskService.insertCnki(toCheckTaskVo, request));
            return result;
        } catch (Exception e) {
            logger.error("提交知网论文失败..e={},systemId={}", e, toCheckTaskVo.getSystemId());
            result.put(Constants.RESP_MESSAGE, "提交失败,请刷新后重试!");
            return result;
        }
    }

    @ResponseBody
    @RequestMapping(value = "/calculatePaperNumber")
    public Object calculatePaperNumber(String content, Long systemId) {
        Map<String, Object> result = new HashMap<>();
        try {
            ToCheckSystem system = this.toCheckSystemService.getById(systemId);
            int paperTotalNum = CommonUtil.contentLength(content, systemId);
            int unit = system.getSystemUnit();
            int piece = paperTotalNum / unit;
            if (paperTotalNum % unit != 0) piece++;
            BigDecimal cost = system.getSystemPrice().multiply(BigDecimal.valueOf(piece));
            result.put("piece", piece);
            result.put("cost", cost);
        } catch (Exception e) {
            logger.error("计算论文字数失败", e);
            return ResponseJson.body(Constants.RESP_FAIL, "计算论文字数失败,请刷新后重试!");
        }
        return ResponseJson.body(Constants.RESP_SUCCESS, "", result);
    }
}
