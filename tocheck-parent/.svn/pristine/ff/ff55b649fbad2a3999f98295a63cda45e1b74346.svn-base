package com.tocheck.parent.core.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.tocheck.parent.common.constans.Constants;
import com.tocheck.parent.common.util.DateUtil;
import com.tocheck.parent.common.util.ResponseJson;
import com.tocheck.parent.core.dao.IFreeActivityDao;
import com.tocheck.parent.core.dao.IUserActivityDao;
import com.tocheck.parent.core.dao.IUserCouponDao;
import com.tocheck.parent.core.entity.FreeActivity;
import com.tocheck.parent.core.entity.UserActivity;
import com.tocheck.parent.core.entity.UserCoupon;
import com.tocheck.parent.core.properties.CommonsProperties;
import com.tocheck.parent.core.service.UserActivityService;
import com.tocheck.parent.core.vo.UserActivityVo;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author pangliang
 * @create 2017-07-05 9:05
 **/
@Service
public class UserActivityServiceImpl implements UserActivityService {

    @Autowired
    private IUserActivityDao userActivityDao;
    @Autowired
    private IUserCouponDao userCouponDao;
    @Autowired
    private IFreeActivityDao freeActivityDao;
    @Autowired
    private CommonsProperties commonsProperties;

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public ResponseJson submitQQShareImg(MultipartHttpServletRequest request, long actId, long userId) throws IOException {
        UserActivityVo activity = userActivityDao.selectByPrimaryKey(actId, userId);
        if (activity != null && activity.getStatus() == Constants.ACTIVITY_PASS) {
            return ResponseJson.body(Constants.RESP_FAIL, "本活动您已经参加过了,看看其他活动吧!");
        }
        Map<String, MultipartFile> fileMap = request.getFileMap();
        if (fileMap == null || fileMap.isEmpty()) {
            return ResponseJson.body(Constants.RESP_FAIL, "请上传您的图片文件!");
        }
        MultipartFile uploadFile = null;
        for (Map.Entry<String, MultipartFile> fileEntry : fileMap.entrySet()) {
            uploadFile = fileEntry.getValue();
            break;
        }
        if (uploadFile == null) {
            return ResponseJson.body(Constants.RESP_FAIL, "请上传您的图片文件!");
        }
        if (!isProperImage(uploadFile.getOriginalFilename())) {
            return ResponseJson.body(Constants.RESP_FAIL, "系统仅支持.bmp、.jpg、.gif和.png格式图片!");
        }
        String userDir = DateUtil.getDate(new Date(), "yyyyMMddHH");
        String fileDir = commonsProperties.activity_path + File.separator + userDir + File.separator + userId + File.separator;
        String fileName = RandomStringUtils.randomNumeric(20);
        String suffix = getImageSuffix(uploadFile.getOriginalFilename());
        File fileParent = new File(fileDir);
        if (!fileParent.exists()) {
            fileParent.mkdirs();
        }
        File file = new File(fileDir + fileName + suffix);
        FileUtils.copyInputStreamToFile(uploadFile.getInputStream(), file);
        String filePath = fileDir + fileName + suffix;
        if (activity == null) {
            activity = new UserActivityVo();
            activity.setUserId(userId);
            activity.setActId(actId);
            activity.setActResult(filePath);
            activity.setStatus(Constants.ACTIVITY_AUDIT);
            userActivityDao.insert(activity);
        } else {
            Map<String, Object> param = new HashMap<>();
            param.put("id", activity.getId());
            param.put("status", Constants.ACTIVITY_AUDIT);
            param.put("actResult", filePath);
            userActivityDao.updateByMap(param);
        }
        return ResponseJson.body(Constants.RESP_SUCCESS);
    }

    @Override
    public UserActivity getActivityDetail(long actId, long userId) {
        return userActivityDao.selectByPrimaryKey(actId, userId);
    }

    @Override
    public PageInfo<UserActivityVo> listPage(Integer p) {
        PageHelper.startPage(p, Constants.PAGE_LIMIT);
        List<UserActivityVo> list = userActivityDao.getByMap(null);
        return new PageInfo<>(list);
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public ResponseJson activityAudit(String ids, int status) {
        if (StringUtils.isBlank(ids)) {
            return ResponseJson.body(Constants.RESP_FAIL, "请至少选择一条!");
        }
        if (status == Constants.ACTIVITY_NOPASS || status == Constants.ACTIVITY_PASS) {
            Map<String, Object> param = new HashMap<>();
            for (String id : ids.split(",")) {
                UserActivity activity = userActivityDao.getById(Long.parseLong(id));
                if (activity.getStatus() == Constants.ACTIVITY_PASS) {
                    continue;
                }
                param.put("id", id);
                param.put("status", status);
                param.put("approveTime", new Date());
                userActivityDao.updateByMap(param);

                if (status == Constants.ACTIVITY_PASS) {
                    UserCoupon userCoupon = userCouponDao.selectByPrimaryKey(activity.getUserId(), activity.getActId());
                    if (userCoupon == null) {
                        FreeActivity freeActivity = freeActivityDao.getById(activity.getActId());
                        UserCoupon coupon = new UserCoupon();
                        coupon.setActId(freeActivity.getId());
                        coupon.setCash(freeActivity.getCash());
                        coupon.setStatus(Constants.ENABLED);
                        coupon.setSystemId(freeActivity.getSystemId());
                        coupon.setTitle(freeActivity.getTitle());
                        coupon.setUserId(activity.getUserId());
                        userCouponDao.insert(coupon);
                    }
                }
            }
        }
        return ResponseJson.body(Constants.RESP_SUCCESS);
    }

    public static boolean isProperImage(String filename) {
        String suffix = getImageSuffix(filename);
        if (StringUtils.isBlank(suffix)) {
            return false;
        }
        Pattern pattern = Pattern.compile(Constants.IMG_SUFFIX);
        Matcher matcher = pattern.matcher(suffix);
        return matcher.matches();
    }

    public static String getImageSuffix(String fileName) {
        int index = StringUtils.lastIndexOf(fileName, ".");
        return StringUtils.substring(fileName, index);
    }
}
