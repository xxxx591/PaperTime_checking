package com.tocheck.parent.web.ctrl;

import com.tocheck.parent.common.constans.Constants;
import com.tocheck.parent.common.dto.AlipayQrNotifyDto;
import com.tocheck.parent.common.util.CommonUtil;
import com.tocheck.parent.common.util.FileReader;
import com.tocheck.parent.common.util.ResponseJson;
import com.tocheck.parent.common.util.ToCheckFileUtils;
import com.tocheck.parent.core.entity.*;
import com.tocheck.parent.core.interfaces.Auth;
import com.tocheck.parent.core.properties.CommonsProperties;
import com.tocheck.parent.core.service.*;
import com.tocheck.parent.core.utils.AliPayUtil;
import com.tocheck.parent.core.utils.AlipayCore;
import com.tocheck.parent.core.utils.WxPayUtil;
import com.tocheck.parent.core.vo.ToCheckTaskVo;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;

/**
 * @author pangliang
 * @create 2017-05-24 16:35
 **/
@Controller
public class SubmitTaskCtrl extends BaseCtrl {

    private Logger logger = LoggerFactory.getLogger(SubmitTaskCtrl.class);

    @Autowired
    private ToCheckSystemService toCheckSystemService;

    @Autowired
    private ToCheckTaskService toCheckTaskService;

    @Autowired
    private WxPayUtil wxPayUtil;

    @Autowired
    private AliPayUtil aliPayUtil;

    @Autowired
    private ToCheckThirdPartyOrderService toCheckThirdPartyOrderService;

    @Autowired
    private UserActivityService userActivityService;

    @Autowired
    private ToCheckMajorService toCheckMajorService;

    @Autowired
    private CommonsProperties commonsProperties;

    @Auth
    @RequestMapping(value = "/submitTask/{id:[0-9]+}", method = RequestMethod.GET)
    public String submitTask(@PathVariable long id, Model model) {
        try {
            ToCheckSystem system = toCheckSystemService.getById(id);
            if (system == null) return "redirect:/index.html";
            model.addAttribute("system", system);

            List<ToCheckSystem> list = toCheckSystemService.getAll();
            model.addAttribute("list", list);

            List<UserActivity> activityList = userActivityService.getCoupon(id, this.getSessionUserInfo().getId());
            model.addAttribute("activityList", activityList);

            List<ToCheckMajor> majorList =  toCheckMajorService.getAll();
            model.addAttribute("majorList",majorList);
            if (system.getId() <= 3) {
                return "submitTask/cnki";
            } else {
                return "submitTask/same";
            }
        } catch (Exception e) {
            logger.error("进入提交论文页面失败!", e);
        }
        return "redirect:/index.html";
    }

//    @ResponseBody
//    @RequestMapping(value = "/submitTask/same", method = RequestMethod.POST)
//    public ResponseJson paperPass(ToCheckTaskVo checkTaskVo) {
//        if (StringUtils.isNotBlank(checkTaskVo.getTitle()) && checkTaskVo.getTitle().length() > 100) {
//            return ResponseJson.body(Constants.RESP_FAIL, "标题请小于100字符!");
//        }
//        if (StringUtils.isNotBlank(checkTaskVo.getAuthor()) && checkTaskVo.getAuthor().length() > 20) {
//            return ResponseJson.body(Constants.RESP_FAIL, "作者请小于20字符!");
//        }
//        if (StringUtils.isBlank(checkTaskVo.getContent())) {
//            return ResponseJson.body(Constants.RESP_FAIL, "论文内容不能为空!");
//        }
//        if (checkTaskVo.getSystemId() == null) {
//            return ResponseJson.body(Constants.RESP_FAIL, "参数错误,请刷新后重试!");
//        }
//        try {
////            toCheckTaskService.insert(checkTaskVo);
//        } catch (Exception e) {
//            logger.error("提交论文失败..e={},systemId={}", e, checkTaskVo.getSystemId());
//            return ResponseJson.body(false, "提交失败,请刷新后重试!");
//        }
//        return ResponseJson.body(Constants.RESP_SUCCESS, "提交成功!");
//    }
//
//    @ResponseBody
//    @RequestMapping(value = "/submitTask/cnki", method = RequestMethod.POST)
//    public Map<String, Object> cnki(ToCheckTaskVo toCheckTaskVo, MultipartHttpServletRequest request) {
//
//        Map<String, Object> result = new HashMap<>();
//        result.put(Constants.RESP_STATE, Constants.RESP_FAIL);
//        try {
//            result.putAll(toCheckTaskService.insertCnki(toCheckTaskVo, request));
//            return result;
//        } catch (Exception e) {
//            logger.error("提交知网论文失败..e={},systemId={}", e, toCheckTaskVo.getSystemId());
//            result.put(Constants.RESP_MESSAGE, Constants.COMMIT_ERROR);
//            return result;
//        }
//    }

    @ResponseBody
    @RequestMapping(value = "/submitTask/uploadCnkiReport")
    public Object uploadCnkiReport(MultipartHttpServletRequest request, Long systemId) {
        try {
            Map<String, MultipartFile> fileMap = request.getFileMap();
            if (fileMap == null || fileMap.isEmpty()) {
                return ResponseJson.body(Constants.RESP_FAIL, "请选择上传文件!");
            }
            MultipartFile uploadFile = null;
            for (Map.Entry<String, MultipartFile> fileEntry : fileMap.entrySet()) {
                uploadFile = fileEntry.getValue();
                break;
            }
            if (uploadFile == null) {
                return ResponseJson.body(Constants.RESP_FAIL, "请选择上传文件!");
            }
            if (!ToCheckFileUtils.isProperPaper(uploadFile.getOriginalFilename())) {
                return ResponseJson.body(Constants.RESP_FAIL, "系统仅支持txt、doc、docx格式文档!");
            }
            File file = ToCheckFileUtils.saveMaterialFile(uploadFile,commonsProperties.paper_path, systemId, String.valueOf(System.currentTimeMillis()));
            return ResponseJson.body(Constants.RESP_SUCCESS, file.getAbsolutePath());
        } catch (Exception e) {
            logger.error("读取文件内容失败!", e);
            return ResponseJson.body(Constants.RESP_FAIL, "上传失败,请刷新后重试!");
        }
    }

    @Auth
    @ResponseBody
    @RequestMapping(value = "/submitTask/saveCnkiTask", method = RequestMethod.POST)
    public ResponseJson saveCnkiTask(ToCheckTaskVo toCheckTaskVo) {
        WebUser user = this.getSessionUserInfo();
        try {
            toCheckTaskVo.setUserId(user.getId());
            toCheckTaskVo.setAgentId(user.getBranchId());
            return toCheckTaskService.saveCnkiTask(toCheckTaskVo,request);
        } catch (Exception e) {
            logger.error("生成支付二维码失败", e);
            return ResponseJson.body(Constants.RESP_FAIL,"生成支付二维码失败,请刷新后再试!");
        }
    }

    /**
     * 支付宝异步通知回调
     */
    @RequestMapping(value = "/submitTask/aliPayNotifyUrl", method = RequestMethod.POST)
    @ResponseBody
    public String alipayNotify(AlipayQrNotifyDto notifyDto, HttpServletRequest request) {
        try {
            // 获取支付宝POST过来反馈信息
            Map requestParams = request.getParameterMap();
            Map<String, String> params = AlipayCore.getAliPayPostMap(requestParams);
            if (StringUtils.isBlank(notifyDto.getSign())) {
                logger.info("notify from pay,sign is null,notify={},params={}", new Object[]{notifyDto, params});
                return null;
            }
            if (aliPayUtil.getSignVeryFy(params) && !StringUtils.isBlank(notifyDto.getSign()) && (notifyDto.getTrade_status().equals("TRADE_FINISHED") || notifyDto.getTrade_status().equals("TRADE_SUCCESS"))) {
                boolean result = aliPayUtil.updateRechargeStatus(notifyDto.getOut_trade_no(), notifyDto.getTrade_no(), notifyDto.getTotal_amount());
                if (result) {
                    return "success";
                }
            }
            logger.info("notify from pay,process failure,notify={},params={}", new Object[]{notifyDto, params});
        } catch (Exception e) {
            logger.warn("支付宝异步返回处理时出现错误", e);
        }
        return null;
    }

    @ResponseBody
    @RequestMapping(value = "/submitTask/calculatePaperNumber")
    public Object calculatePaperNumber(String content, Long systemId) {
        Map<String, Object> result = new HashMap<>();
        try {
            if (StringUtils.isBlank(content)) {
                return ResponseJson.body(Constants.RESP_FAIL, "请输入或上传论文内容!");
            }
            ToCheckSystem system = this.toCheckSystemService.getById(systemId);
            int wordCount = CommonUtil.contentLength(content, systemId);
            int unit = system.getSystemUnit();
            int piece = wordCount / unit;
            if (wordCount % unit != 0) piece++;
            BigDecimal cost = system.getSystemPrice().multiply(BigDecimal.valueOf(piece));
            result.put("wordCount", wordCount);
            result.put("cost", cost);
            result.put("piece", piece);
        } catch (Exception e) {
            logger.error("计算论文字数失败", e);
            return ResponseJson.body(Constants.RESP_FAIL, "计算论文字数失败,请刷新后重试!");
        }
        return ResponseJson.body(Constants.RESP_SUCCESS, "", result);
    }

    @ResponseBody
    @RequestMapping(value = "/submitTask/uploadFile")
    public Object uploadFile(MultipartHttpServletRequest request, Long systemId) {
        try {
            Map<String, MultipartFile> fileMap = request.getFileMap();
            if (fileMap == null || fileMap.isEmpty()) {
                return ResponseJson.body(Constants.RESP_FAIL, "请选择上传文件!");
            }
            MultipartFile uploadFile = null;
            for (Map.Entry<String, MultipartFile> fileEntry : fileMap.entrySet()) {
                uploadFile = fileEntry.getValue();
                break;
            }
            if (uploadFile == null) {
                return ResponseJson.body(Constants.RESP_FAIL, "请选择上传文件!");
            }
            if (!ToCheckFileUtils.isProperPaper(uploadFile.getOriginalFilename())) {
                return ResponseJson.body(Constants.RESP_FAIL, "系统仅支持txt、doc、docx格式文档!");
            }
            File file = ToCheckFileUtils.saveMaterialFile(uploadFile,commonsProperties.paper_path_temp, systemId, String.valueOf(System.currentTimeMillis()));
            String content = FileReader.readContent(file);
            content = StringUtils.replace(content, "<", "^");
            content = StringUtils.replace(content, ">", "^");
            Map<String, Object> result = new HashMap<>();
            result.put("content", content);
            result.put("title", ToCheckFileUtils.getWordName(uploadFile.getOriginalFilename()));
            return ResponseJson.body(Constants.RESP_SUCCESS, content, result);
        } catch (Exception e) {
            logger.error("读取文件内容失败!", e);
            return ResponseJson.body(Constants.RESP_FAIL, "上传失败,请刷新后重试!");
        }
    }


//    @RequestMapping(value = "/submitTask/orderDetail", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
//    @ResponseBody
//    public Object getOrderDetail(Long tid, Long bTid, Long systemId) {
//        try {
//            return toCheckTaskService.orderDetail(tid, bTid, systemId);
//        } catch (Exception e) {
//            logger.error("获取订单信息失败!", e);
//            return ResponseJson.body(Constants.RESP_FAIL, Constants.COMMIT_ERROR, 3);
//        }
//    }

//    @ResponseBody
//    @RequestMapping(value = "/submitTask/sameTbPay", method = RequestMethod.POST)
//    public ResponseJson sameTbPay(ToCheckTaskVo checkTaskVo, Long tid, Long bTid) {
//        try {
//            return toCheckTaskService.sameTbPay(checkTaskVo, tid, bTid, request);
//        } catch (Exception e) {
//            logger.error("淘宝提交检测任务失败", e);
//            return ResponseJson.body(Constants.RESP_FAIL, Constants.COMMIT_ERROR);
//        }
//    }

    @ResponseBody
    @RequestMapping(value = "/submitTask/saveOtherTask", method = RequestMethod.POST)
    public ResponseJson saveOtherTask(ToCheckTaskVo toCheckTaskVo) {
        try {
            WebUser user = this.getSessionUserInfo();
            toCheckTaskVo.setUserId(user.getId());
            toCheckTaskVo.setAgentId(user.getBranchId());
            return toCheckTaskService.saveOtherTask(toCheckTaskVo, request);
        } catch (Exception e) {
            logger.error("生成支付二维码失败!", e);
            return ResponseJson.body(false, "生成支付二维码失败,请刷新后再试!");
        }
    }

    @RequestMapping(value = "/submitTask/wxNotifyUrl")
    @ResponseBody
    public Object wxNotifyUrl() {
        try {
            SortedMap<String, String> map = wxPayUtil.parseXmlToMap(request.getInputStream());
            logger.info("请求参数为:params={}", map);
            boolean flag = wxPayUtil.wxNotify(map);
            if (flag) {
                return "<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>";
            } else {
                logger.info("支付请求处理失败，等待微信再次推送消息");
            }
        } catch (Exception e) {
            logger.error("微信支付异步通知处理失败e={}", e);
        }
        return "SUCCESS";
    }

    @RequestMapping(value = "/submitTask/validateOrderStatus")
    @ResponseBody
    public Object validateOrderStatus(String orderNum) {
        ToCheckThirdPartyOrder order = toCheckThirdPartyOrderService.getByOrderNum(orderNum);
        if (order != null && order.getStatus() == Constants.DONE_PAY_STATUS) {
            return ResponseJson.body(Constants.RESP_SUCCESS, "", order);
        }
        return ResponseJson.body(Constants.RESP_FAIL);
    }
}
