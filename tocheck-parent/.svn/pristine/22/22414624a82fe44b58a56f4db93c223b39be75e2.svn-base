package com.papertime.parent.tocheck.controller.commons;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.papertime.common.common.constants.Constants;
import com.papertime.common.util.common.CookieUrlUtils;
import com.papertime.common.util.common.SSDBUtils;
import com.papertime.parent.tocheck.util.AuthUser;
import com.papertime.parent.tocheck.util.PaperTimeUtil;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.ModelAttribute;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 * Created by kchen on 2016/8/17.
 */
public class BaseController {


    private static final Logger logger = LoggerFactory.getLogger(BaseController.class);

    @Autowired
    protected SSDBUtils ssdbUtils;

    @Autowired
    private PaperTimeUtil paperTimeUtil;

    protected HttpServletRequest request;
    protected HttpServletResponse response;
    protected HttpSession session;


    @ModelAttribute
    public void setReqAndRes(HttpServletRequest request, HttpServletResponse response) {
        this.request = request;
        this.response = response;
        this.session = request.getSession();
    }

    /**
     * 保存用户session信息到ssdb
     *
     * @param
     */
    protected void saveSessionUserInfo(AuthUser user) {
        String sessionId = requestCookieId();
        String value = JSON.toJSONString(user);
        ssdbUtils.save(sessionId + Constants.TAOBAO_USER, value, Constants.USER_SESSION_TIME);
        request.setAttribute(Constants.TAOBAO_USER, user);
    }

    protected void destroyUserSessionInfo() {
        ssdbUtils.del(requestCookieId() + Constants.TAOBAO_USER);
    }

    /**
     * 从ssdb 获取用户信息
     *
     * @return
     */
    protected AuthUser getSessionUserInfo() {
        String sessionId = requestCookieId();
        String value = ssdbUtils.getUserSession(sessionId + Constants.TAOBAO_USER);
        if (StringUtils.isNoneBlank(value)) {
            JSONObject json = JSON.parseObject(value);
            return JSON.toJavaObject(json, AuthUser.class);
        }
        return null;
    }


    /**
     * 获取sessionId
     * @return
     */
    protected String requestCookieId() {
//        paperTimeUtil.putPaperFreeSessionId(request,response);
        return CookieUrlUtils.readCookie(request, Constants.PT_S_ID);
    }

    protected String destroySession() {
        String sessionId = requestCookieId();
        ssdbUtils.del(sessionId);
        return sessionId;
    }


}
