package com.tocheck.parent.core.utils;

import com.alibaba.fastjson.JSON;
import com.tocheck.parent.common.constans.Constants;
import com.tocheck.parent.common.dto.ChargeForm;
import com.tocheck.parent.common.util.CommonUtil;
import com.tocheck.parent.common.util.CookieUrlUtils;
import com.tocheck.parent.common.util.MD5Utils;
import com.tocheck.parent.common.util.SSDBUtils;
import com.tocheck.parent.core.entity.ToCheckThirdPartyOrder;
import com.tocheck.parent.core.service.ToCheckTaskService;
import com.tocheck.parent.core.service.ToCheckThirdPartyOrderService;
import com.tocheck.parent.core.vo.ToCheckTaskVo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.UUID;

/**
 * @author pangliang
 * @create 2017-03-24 10:39
 **/
@Component
public class RechargeOrderUtil {

    @Autowired
    private ToCheckThirdPartyOrderService toCheckThirdPartyOrderService;

    @Autowired
    private ToCheckTaskService toCheckTaskService;

    @Autowired
    private SSDBUtils ssdbUtils;

    public ToCheckThirdPartyOrder getByOrderNum(String orderNum) {
        return toCheckThirdPartyOrderService.getByOrderNum(orderNum);
    }

    public String create(ChargeForm chargeForm) {
        String orderNum = chargeForm.getOrderPrefix() + CommonUtil.createToCheckOrderNum();
        while (toCheckThirdPartyOrderService.getByOrderNum(orderNum) != null) {
            orderNum = chargeForm.getOrderPrefix() + CommonUtil.createToCheckOrderNum();
        }
        ToCheckThirdPartyOrder order = new ToCheckThirdPartyOrder();
        order.setOrderNum(orderNum);
        order.setCreateTime(new Date());
        order.setStatus(Constants.WAIT_PAY_STATUS);
        order.setAmount(chargeForm.getAmount());
        order.setMobile(chargeForm.getMobile());
        toCheckThirdPartyOrderService.insert(order);
        return orderNum;
    }

    @Transactional(propagation = Propagation.REQUIRED)
    public Boolean updateRechargeStatus(String outTradeNo, String tradeNum, String totalFee, HttpServletRequest request) throws IOException {
        ToCheckThirdPartyOrder rechargeRecord = toCheckThirdPartyOrderService.getByOrderNum(outTradeNo);
//        totalFee = rechargeRecord.getAmount().toString();
         if (rechargeRecord != null) {
            if (rechargeRecord.getStatus() == Constants.DONE_PAY_STATUS) {
                return true;
            }
            if (rechargeRecord.getStatus() == Constants.WAIT_PAY_STATUS) {
                updateRechargeRecord(rechargeRecord, tradeNum, totalFee);
                String result = ssdbUtils.getValue("tocheck-task-" + outTradeNo);
                ToCheckTaskVo task = JSON.parseObject(result, ToCheckTaskVo.class);
                toCheckTaskService.insert(task);
                ssdbUtils.del("tocheck-task-" + outTradeNo);
                if (task.getSystemId() > 3) {
                    ssdbUtils.save("tocheck-content-" + task.getId(), task.getContent());
                }
                return true;
            }
        }
        return  false;
    }

    private void updateRechargeRecord(ToCheckThirdPartyOrder rechargeRecord, String tradeNum, String totalFee) {
        Map<String, Object> updateMap = new LinkedHashMap<>();
        updateMap.put("tradeNum", tradeNum);
        updateMap.put("payTime", new Date());
        updateMap.put("status", Constants.DONE_PAY_STATUS);
        updateMap.put("amount", totalFee);
        updateMap.put("id", rechargeRecord.getId());
        toCheckThirdPartyOrderService.updateByMap(updateMap);
    }

    public String createNonceStr() {
        return MD5Utils.getMD5String(UUID.randomUUID().toString());
    }
}
