package com.tocheck.parent.web.ctrl;


import com.alibaba.fastjson.JSON;
import com.tocheck.parent.common.constans.Constants;
import com.tocheck.parent.common.util.CommonUtil;
import com.tocheck.parent.common.util.CookieUrlUtils;
import com.tocheck.parent.common.util.SSDBUtils;
import com.tocheck.parent.core.entity.WebUser;
import com.tocheck.parent.core.service.AgentUserService;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 * Created by kchen on 2016/8/17.
 */
public class BaseCtrl {


    private static final Logger logger = LoggerFactory.getLogger(BaseCtrl.class);


    protected HttpServletRequest request;
    protected HttpServletResponse response;
    protected HttpSession session;
    @Autowired
    protected SSDBUtils ssdbUtils;
    @Autowired
    protected AgentUserService agentUserService;


    @ModelAttribute
    public void setReqAndRes(HttpServletRequest request, HttpServletResponse response) {
        this.request = request;
        this.response = response;
        this.session = request.getSession();
    }

    /**
     * 保存用户信息到ssdb
     *
     * @param webUser
     */
    protected void saveSessionUserInfo(WebUser webUser) {
        String sessionId = requestCookieId();
        if (StringUtils.isBlank(sessionId)) {
            return;
        }
        ssdbUtils.save(sessionId, JSON.toJSONString(webUser), Constants.USER_SESSION_TIME);
    }

    protected void saveSessionRecommend(String prefix, String recommendType) {
        long agentId = CommonUtil.decodeUserId(prefix);
        if (agentUserService.getById(agentId) == null) {   //如果代理商不存在了,则转为官网流量
            agentId = Constants.ROOT_AGENT_ID;
        }
        ssdbUtils.save(requestCookieId() + recommendType, String.valueOf(agentId));
        request.setAttribute(recommendType,  String.valueOf(agentId));
    }

    /**
     * 从ssdb获取用户信息
     *
     * @return
     */
    protected WebUser getSessionUserInfo() {
        String sessionId = requestCookieId();
        if (StringUtils.isBlank(sessionId)) {
            return null;
        }
        String value = ssdbUtils.getValue(sessionId);
        if (StringUtils.isNoneBlank(value)) {
            return JSON.parseObject(value, WebUser.class);
        }
        return null;
    }

    /**
     * 删除ssdb中的用户信息
     */
    protected void delSessionUserInfo() {
        String sessionId = requestCookieId();
        if (StringUtils.isBlank(sessionId)) {
            return;
        }
        ssdbUtils.del(sessionId);
    }

    /**
     * 获取sessionId
     *
     * @return
     */
    protected String requestCookieId() {
        return CookieUrlUtils.readCookie(request, Constants.TOCHECK_S_ID);
    }

    protected Long getAgentId() {
        return (Long) request.getAttribute("agentId");
    }


}
