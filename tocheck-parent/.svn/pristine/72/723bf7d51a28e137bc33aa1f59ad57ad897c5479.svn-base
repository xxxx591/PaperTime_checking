package com.tocheck.parent.core.utils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;
import com.tocheck.parent.common.constans.Constants;
import com.tocheck.parent.common.util.CommonUtil;
import com.tocheck.parent.common.util.HttpClientUtil;
import com.tocheck.parent.common.util.SSDBUtils;
import com.tocheck.parent.core.service.ToCheckTaskService;
import com.tocheck.parent.core.vo.ToCheckTaskVo;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.*;

@Component
public class PaperTimeUtil {

    @Autowired
    private ToCheckTaskService toCheckTaskService;
    @Autowired
    private SSDBUtils ssdbUtils;

    private static final Logger logger = LoggerFactory.getLogger(PaperTimeUtil.class);

    private static final String ERROR = "error";
    private static final String SUCCESS = "success";
    private static final String FAIL = "fail";
    private static final String MSG = "msg";
    private static final String STATUS = "status";
    private static final String SYSTEM_IP = "182.92.4.175";
    private static final String USER_NAME = "test";
    private static final String APP_KEY = "5397862461";
    private static final String APP_SECRET = "IMA3JLUDB4VCPFZHDLOCRAK46LBMC1DR";
    private static final String SUBMIT_CHECK_TASK = "http://tb.papertime.cc/unified/check.xhtml";
    private static final String QUERY_CHECK_TASK = "http://tb.papertime.cc/unified/query.xhtml";


    public void submitCheckTask() {
        try {
            PageInfo<ToCheckTaskVo> pageInfo = toCheckTaskService.canCheckTask(Constants.CHECK_SYSTEM_PAPERTIME, Constants.CHECK_STATUS_WAIT);
            for (ToCheckTaskVo vo : pageInfo.getList()) {
                Long time = System.currentTimeMillis();
                String nonce_str = CommonUtil.buildRandomNum(6);
                List<String> signParam = new ArrayList<>();
                signParam.add(USER_NAME);
                signParam.add(APP_KEY);
                signParam.add(String.valueOf(time));
                signParam.add(nonce_str);
                signParam.add(SYSTEM_IP);
                signParam.add(vo.getTitle());
                signParam.add(vo.getAuthor());
                signParam.add(String.valueOf(vo.getWordNum()));

                Map<String, Object> queryMap = new HashMap<>();
                queryMap.put("user_name", USER_NAME);
                queryMap.put("app_key", APP_KEY);
                queryMap.put("timestamp", time);
                queryMap.put("nonce_str", nonce_str);
                queryMap.put("client_ip", SYSTEM_IP);
                queryMap.put("title", vo.getTitle());
                queryMap.put("author", vo.getAuthor());
                queryMap.put("content", ssdbUtils.getValue("tocheck-content-" + vo.getId()));
                queryMap.put("word_count", vo.getWordNum());
                queryMap.put("sign", sign(signParam, APP_SECRET));
                String result = HttpClientUtil.doHttpClientPost(SUBMIT_CHECK_TASK, JSON.toJSONString(queryMap));
                JSONObject object = JSON.parseObject(result);
                logger.info("当前任务ID={},请求结果object={}", vo.getId(), object);
                if (object != null && StringUtils.equals(object.getString(ERROR), SUCCESS)) {
                    Long checkId = object.getLong("data");
                    if (checkId != null) {
                        toCheckTaskService.updateTaskStatus(vo.getId(), Constants.CHECK_STATUS_CHECKING, checkId);
                        ssdbUtils.del("tocheck-content-" + vo.getId());
                    }
                } else if (object != null && StringUtils.equals(object.getString(ERROR), FAIL)) {
                    toCheckTaskService.updateErrorMsg(vo.getId(), object.getString(MSG));
                }
            }

        } catch (Exception e) {
            logger.error("提交定稿终检论文失败e={}", e);
        }
    }


    public void updateCheckTaskStatus() {
        try {
            PageInfo<ToCheckTaskVo> pageInfo = toCheckTaskService.canCheckTask(Constants.CHECK_SYSTEM_PAPERTIME, Constants.CHECK_STATUS_CHECKING);
            for (ToCheckTaskVo vo : pageInfo.getList()) {
                Long time = System.currentTimeMillis();
                String nonce_str = CommonUtil.buildRandomNum(6);
                List<String> signParam = new ArrayList<>();
                signParam.add(USER_NAME);
                signParam.add(APP_KEY);
                signParam.add(String.valueOf(time));
                signParam.add(nonce_str);
                signParam.add(SYSTEM_IP);
                signParam.add(String.valueOf(vo.getCheckId()));

                Map<String, Object> queryMap = new LinkedHashMap<>();
                queryMap.put("user_name", USER_NAME);
                queryMap.put("app_key", APP_KEY);
                queryMap.put("timestamp", time);
                queryMap.put("nonce_str", nonce_str);
                queryMap.put("client_ip", SYSTEM_IP);
                queryMap.put("check_id", vo.getCheckId());
                queryMap.put("sign", sign(signParam, APP_SECRET));
                String result = HttpClientUtil.doHttpClientPost(QUERY_CHECK_TASK, JSON.toJSONString(queryMap));
                JSONObject object = JSON.parseObject(result);
                if (object != null && StringUtils.equals(object.getString(ERROR), SUCCESS)) {
                    JSONObject jsonObject = object.getJSONObject("data");
                    if (jsonObject != null) {
                        if (jsonObject.getIntValue(STATUS) == Constants.CHECK_STATUS_REPORT_ERROR) {
                            toCheckTaskService.updateErrorMsg(vo.getId(), "生成报告出错，请联系卖家，");
                        }
                        if (jsonObject.getIntValue(STATUS) == Constants.CHECK_STATUS_CHECK_ERROR) {
                            toCheckTaskService.updateErrorMsg(vo.getId(), "检测出错，请联系卖家");
                        }
                        if (jsonObject.getIntValue(STATUS) == Constants.CHECK_STATUS_FINISH) {
                            toCheckTaskService.finishCheck(vo.getId(), Constants.CHECK_STATUS_FINISH, jsonObject.getString("checkResult"));
                        }
                    }
                } else if (object != null && StringUtils.equals(object.getString(ERROR), FAIL)) {
                    toCheckTaskService.updateErrorMsg(vo.getId(), object.getString("message"));
                }
            }
        } catch (Exception e) {
            logger.error("定稿终检论文查询失败e={}", e);
        }
    }

    public static String sign(List<String> params, String appSecret) {
        Collections.sort(params);
        StringBuilder string1 = new StringBuilder(16);
        for (String string : params) {
            string1.append(string);
        }
        string1.append(appSecret);
        try {
            String sign = URLEncoder.encode(string1.toString(), "UTF-8");
            logger.info("签名前数据:sign={}", sign);
            MessageDigest crypt = MessageDigest.getInstance("SHA-1");
            crypt.reset();
            crypt.update(sign.getBytes("UTF-8"));
            return byteToHex(crypt.digest());
        } catch (Exception e) {
            logger.error("服务器签名失败params={}", params, e);
        }
        return null;
    }


    private static String byteToHex(final byte[] hash) {
        Formatter formatter = new Formatter();
        for (byte b : hash) {
            formatter.format("%02x", b);
        }
        String result = formatter.toString();
        formatter.close();
        return result;
    }
}
